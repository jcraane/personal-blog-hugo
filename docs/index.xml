<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jamie Craane personal blog</title>
    <link>https://jamiecraane.dev/</link>
    <description>Recent content on Jamie Craane personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jamiecraane.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Integrating Firebase JWT token verification in Ktor - Part 2</title>
      <link>https://jamiecraane.dev/2025/01/16/firebase_jwt_ktor_part_2/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2025/01/16/firebase_jwt_ktor_part_2/</guid>
      <description>Part 2: Integrating Firebase Users into Your Database with Ktor In the first part of this blog series, we explored how to integrate Firebase JWT authentication into your Ktor application. Besides creating accounts and logging in, we also want to store a reference of the Firebase user in our own database. This way, data can be associated with a specific user.
In this post, we will look at how to integrate your Firebase users in your own application database.</description>
    </item>
    
    <item>
      <title>AI Assistant Prompt Catalog</title>
      <link>https://jamiecraane.dev/2024/12/11/ai-assistant-prompt-catalog/</link>
      <pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2024/12/11/ai-assistant-prompt-catalog/</guid>
      <description>AI Assistant prompt catalog Prompts Android: Replace kotlin synthetic view viewBinding @author: https://x.com/jcraane
Kotlin synthetics are deprecated. This prompt replaces Kotlin synthetics in a file with viewBinding:
Replace kotlin synthetic with viewBinding. Prefix all Koltin synthetic views with binding. Replace snake case view names with camel casing. $SELECTION Create a unit test using Kotest and BehaviorSpec @author: https://x.com/jcraane
You are an expert AI programmer which uses unit tests to verify behavior.</description>
    </item>
    
    <item>
      <title>Integrating Firebase JWT token verification in Ktor - Part 1</title>
      <link>https://jamiecraane.dev/2024/12/11/firebase_jwt_ktor_part_1/</link>
      <pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2024/12/11/firebase_jwt_ktor_part_1/</guid>
      <description>Integrating Firebase JWT token verification in Ktor - Part 1 As applications become more complex and security becomes a priority, choosing the right tools to handle authentication is crucial. Today, we&amp;rsquo;ll explore how to integrate Firebase JWT (JSON Web Token) authentication in a Ktor server application. This blog post will cover the core setup and implementation details required to ensure secure handling of JWTs in a Ktor application.
Introduction to Ktor and Firebase Authentication https://ktor.</description>
    </item>
    
    <item>
      <title>Jetpack Compose - Recompositions</title>
      <link>https://jamiecraane.dev/2022/11/13/compose_recompositions/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2022/11/13/compose_recompositions/</guid>
      <description>What is recomposition A Compose function in Jetpack Compose represents some UI to be rendered:
@Composable fun UsersScreen() { var usersScreenState by remember { mutableStateOf( UsersScreenState( title = &amp;#34;Users&amp;#34;, body = &amp;#34;This is the users screen&amp;#34;, (1..40).toList().map { Person(it, &amp;#34;Firstname Lastname $it&amp;#34;) }, ) ) } Column() { Text(usersScreenState.title) Text(usersScreenState.description) Button(onClick = { usersScreenState = usersScreenState.copy(title = Random.nextInt().toString()) }) { Text(&amp;#34;Change title&amp;#34;) } PersonList(usersScreenState.persons) } } Notice that the usersScreenState is a var which means it can change.</description>
    </item>
    
    <item>
      <title>Standalone KMM Images</title>
      <link>https://jamiecraane.dev/2022/07/27/standalone_kmm_images/</link>
      <pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2022/07/27/standalone_kmm_images/</guid>
      <description>Image by Dall-E: &amp;ldquo;Factory which produces lots of the same products. Dark.&amp;rdquo;
Context https://jamiecraane.dev/2021/07/27/resource_images_kmm/ describes how to use the kmm-images plugin to share images between a Kotlin Multiplatform Mobile (short KMM) Android and iOS app. You can also use kmm-images in a standalone Android app. This post describes the advantages of doing this.
Benefits of using kmm-images in an Android app Kmm-images unifies image handling in a KMM iOS and Android app.</description>
    </item>
    
    <item>
      <title>Koin ViewModel Injection</title>
      <link>https://jamiecraane.dev/2022/07/27/koin_viewmodel_injection/</link>
      <pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2022/07/27/koin_viewmodel_injection/</guid>
      <description>Image by Dall-E: &amp;ldquo;Inside of a large factory assembling robots from parts. The scene is somewhat dark with neon lights. cyberpunk style.&amp;rdquo;
Context A ViewModel in Android (not to be confused with the term ViewModel in the MVVM architecture pattern) is a component scoped to the lifecycle of another component, usually a fragment or an activity. To create maintainable code without becoming the ViewModel to large, the ViewModel delegates to other objects.</description>
    </item>
    
    <item>
      <title>Code re-usability</title>
      <link>https://jamiecraane.dev/2022/06/16/code_reusability/</link>
      <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2022/06/16/code_reusability/</guid>
      <description>Re-usability within software development means to reuse (part of) a solution in different products with the aim of:
faster time to market lower costs less chance of introducing issues be able to use shared knowledge Re-usability at different abstraction levels Re-usability exists at many levels of abstraction in software development. Each abstraction offers some degree of advantages as well as disadvantages. Some examples, from high to low abstraction level:
Infrastructure Using infrastructure to distribute software.</description>
    </item>
    
    <item>
      <title>KMM adoption strategies</title>
      <link>https://jamiecraane.dev/2021/11/15/kmm_adoption_strategies/</link>
      <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2021/11/15/kmm_adoption_strategies/</guid>
      <description>KMM adoption strategies Introduction Kotlin multiplatform Mobile, in short KMM, lets you write native cross platform mobile applications. It lets you share logic across iOS and Android while still leveraging all of the native features of the platform.
There are several advantages of sharing code between platforms:
Reduced development time More consistent logic across platforms More consistent behavior across platforms Less bugs Improved team communication KMM gives the flexibility to decide what code is shared.</description>
    </item>
    
    <item>
      <title>Localized resources and images in KMM</title>
      <link>https://jamiecraane.dev/2021/07/27/resource_images_kmm/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2021/07/27/resource_images_kmm/</guid>
      <description>Introduction Kotlin Multiplatform Mobile (in short KMM) allows you to share a lot of code which is normally duplicated across iOS and Android native platforms. KMM does not mandate that certain type of code is shared, it is up to you. It also does not mandate any particular architecture.
Although KMM enables sharing of code between platforms it does not provide the ability to share localized string resources and images out-of-the box between iOS and Android.</description>
    </item>
    
    <item>
      <title>Casting images with Chromecast</title>
      <link>https://jamiecraane.dev/2021/01/05/android_chromecast_images/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2021/01/05/android_chromecast_images/</guid>
      <description>Full source code can be found here: https://github.com/jcraane/android-simple-image-cast
By adding Chromecast support to media rich apps like photo- and video players, users can display content to Chromecast enabled devices. This greatly enhances the user experience of those apps.
This post demonstrates how to integrate the Chromecast SDK to add cast support for casting images. The app displays a list of publicly available images using an image carousel. When the user scrolls through those images, the images are cast to a connected receiver.</description>
    </item>
    
    <item>
      <title>IntelliJ find and replace using regular expressions</title>
      <link>https://jamiecraane.dev/2020/12/16/intellij_replace_regex/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2020/12/16/intellij_replace_regex/</guid>
      <description>IntelliJ (and all JetBrains ideas) support the ability to find and replace text using regular expressions. Regular expressions in this context can be very powerful. When you do not use regular expressions enough, it may take some time to come up with a correct regex, often looking at the docs or examples to find out how they work.
find/replace regex (and also regular find/replace) works particularly well when lots of replacements need to be made.</description>
    </item>
    
    <item>
      <title>Kotlin: Multi variable null check</title>
      <link>https://jamiecraane.dev/2020/12/10/kotlin_null/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2020/12/10/kotlin_null/</guid>
      <description>Although not-null, immutable variables with sensible defaults are often desired, it is not always the case. It is sometimes required to check if multiple variables are not null. This post describes several variants of how to do this when smart casts are not possible because the variables are mutable.
Consider the following example:
class Person() { var name: String? = null var age: Int? = null fun doSomething() { if (name !</description>
    </item>
    
    <item>
      <title>AWS tutorial: DynamoDB part 2</title>
      <link>https://jamiecraane.dev/2016/12/12/aws_dynamo_db2/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2016/12/12/aws_dynamo_db2/</guid>
      <description>In the previous tutorial I showed you how to use AWS Lambda and API Gateway to insert items in a DynamoDB table. The example implemented a function which stored the location of the user. In this tutorial we create a Lambda function which retrieves this data from the DynamoDB table and expose this functionality over HTTP using API Gateway.
Create a DynamoDB Global Secondary Index
The DeviceLocation DynamoDB table uses the id as partition key.</description>
    </item>
    
    <item>
      <title>AWS tutorial: DynamoDB part 1</title>
      <link>https://jamiecraane.dev/2016/12/02/aws_dynamo_db1/</link>
      <pubDate>Fri, 02 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2016/12/02/aws_dynamo_db1/</guid>
      <description>In this post I am going through a full (Java) example of integrating AWS Lambda, DynamoDb and Api Gateway to create a function and expose this function as a HTTP resource for other parties to consume.
Before we dive into the details I will give a brief overview of the AWS services used in this example (as taken from the AWS documentation):
AWS Lambda. AWS Lambda is a compute service that runs developers&amp;rsquo; code in response to events and automatically manages the compute resources for them, making it easy to build applications that respond quickly to new information.</description>
    </item>
    
    <item>
      <title>Elastic Search max open files</title>
      <link>https://jamiecraane.dev/2016/02/22/max_open_files_es/</link>
      <pubDate>Fri, 02 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2016/02/22/max_open_files_es/</guid>
      <description>Elastic Search, Logstash and Kibana (ELK) is an end-to-end stack which provides realtime analytics for almost any type of structured or unstructured data.
When importing large amounts of data using Logstash to Elastic Search (ES), the chances are that ES hit the limits of the maximum files it can open. This limit is seen as an error in the ES logs with the following description: (Too many open files)
To deal with this you can increase the maximum files ES (or any process) may open using the following steps:</description>
    </item>
    
    <item>
      <title>IntelliJ structural search and replace</title>
      <link>https://jamiecraane.dev/2014/02/08/intellij_structural/</link>
      <pubDate>Sat, 08 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2014/02/08/intellij_structural/</guid>
      <description>Sometimes you run into a situation where you want to refactor some code but cannot use the regular refactorings. For example, take the following code:
jQuery(&amp;#34;body&amp;#34;).on(&amp;#34;change&amp;#34;, &amp;#34;#fontSelector&amp;#34;, &amp;#34;change&amp;#34;, function () { var selectedFont = jQuery(&amp;#34;#fontSelector&amp;#34;).val(); layoutDesigner.selectFont(selectedFont); }); I wanted to replace the above code with the following:
jQuery(&amp;#34;#fontSelector&amp;#34;).off(&amp;#34;change&amp;#34;); jQuery(&amp;#34;#fontSelector&amp;#34;).on(&amp;#34;change&amp;#34;, function () { var selectedFont = jQuery(&amp;#34;#fontSelector&amp;#34;).val(); layoutDesigner.selectFont(selectedFont); }); Sure, I could rewrite this manually. But this takes a long time with dozens of such event handling constructs, all with different selectors, events and functions.</description>
    </item>
    
    <item>
      <title>MyBatis</title>
      <link>https://jamiecraane.dev/2013/09/20/mybatis_mapping_map/</link>
      <pubDate>Fri, 20 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2013/09/20/mybatis_mapping_map/</guid>
      <description>As some of you will know I am a huge fan of MyBatis. I have used it in a lot of projects and it never failed me. I like how you are in control of the SQL and the flexibility this brings by mapping result sets to classes instead of mapping tables to classes.
Recently I wanted to map some columns from a table to actual typed properties of an object, and some columns to a property of type Map within that same object.</description>
    </item>
    
    <item>
      <title>Melody composition with genetic algorithms</title>
      <link>https://jamiecraane.dev/2009/06/16/ga_melody_composition/</link>
      <pubDate>Tue, 16 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2009/06/16/ga_melody_composition/</guid>
      <description>Introduction Several techniques exist to create computer generated musical melodies. One of those techniques is genetic algorithms. Because the diversity of melodies over a specific range of notes is so large, genetic algorithms are a good candidate to help in composing melodies. This article describes how genetic algorithms can be used to compose musical melodies. this is explained following the steps needed to apply a genetic algorithm. These steps are:</description>
    </item>
    
    <item>
      <title>Introduction to genetic algorithms</title>
      <link>https://jamiecraane.dev/2009/02/23/ga_introduction/</link>
      <pubDate>Mon, 23 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2009/02/23/ga_introduction/</guid>
      <description>Out of interest I am familiarizing myself in genetic algorithms, in short GA. My interest in GA came when I first heard about the JGAP project. As mentioned on the project&amp;rsquo;s site &amp;ldquo;JGAP (pronounced &amp;ldquo;jay-gap&amp;rdquo;) is a Genetic Algorithms and Genetic Programming component provided as a Java framework.&amp;rdquo;. For a newcomer I found it difficult to get a good overview about all the concepts introduced in genetic algorithms. Before diving into JGAP, I think it is essential that these concepts are well understood.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jamiecraane.dev/search/placeholder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/search/placeholder/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jamiecraane.dev/top/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/top/about/</guid>
      <description>I have been developing software professionally since 2001. Helping customers with solutions that really add value. I like a challenge and continuously keep my knowledge up to date and share it with great enthusiasm to the public and with my team.
Since 2012 I have been designing and developing backend and mobile applications for organisations with user bases of several hundred of thousands to millions of users. From high performance backend systems which run on AWS to native Android apps for consumers.</description>
    </item>
    
  </channel>
</rss>
