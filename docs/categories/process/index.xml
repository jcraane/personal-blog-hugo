<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PROCESS on Jamie Craane personal blog</title>
    <link>https://jamiecraane.dev/categories/process/</link>
    <description>Recent content in PROCESS on Jamie Craane personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://jamiecraane.dev/categories/process/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Koin ViewModel Injection</title>
      <link>https://jamiecraane.dev/2022/07/27/koin_viewmodel_injection/</link>
      <pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2022/07/27/koin_viewmodel_injection/</guid>
      <description>Context A ViewModel in Android (not to be confused with the term ViewModel in the MVVM architecture pattern) is a component scoped to the lifecycle of another component, usually a fragment or an activity. To create maintainable code without becomaing the ViewModel to large, the ViewModel delegates to other objects. When using coroutines, those other objects might use suspending functions. Those functions are called from the ViewModel in a CoroutineScope. For a ViewModel this is the viewModelScope.</description>
    </item>
    
    <item>
      <title>Code re-usability</title>
      <link>https://jamiecraane.dev/2022/06/16/code_reusability/</link>
      <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2022/06/16/code_reusability/</guid>
      <description>Re-usability within software development means to reuse (part of) a solution in different products with the aim of:
faster time to market lower costs less chance of introducing issues be able to use shared knowledge Re-usability at different abstraction levels Re-usability exists at many levels of abstraction in software development. Each abstraction offers some degree of advantages as well as disadvantages. Some examples, from high to low abstraction level:
Infrastructure Using infrastructure to distribute software.</description>
    </item>
    
  </channel>
</rss>
