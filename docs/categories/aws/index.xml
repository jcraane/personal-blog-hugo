<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS on Jamie Craane personal blog</title>
    <link>https://jamiecraane.dev/categories/aws/</link>
    <description>Recent content in AWS on Jamie Craane personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Dec 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://jamiecraane.dev/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS tutorial: DynamoDB part 2</title>
      <link>https://jamiecraane.dev/2016/12/12/aws_dynamo_db2/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2016/12/12/aws_dynamo_db2/</guid>
      <description>In the previous tutorial I showed you how to use AWS Lambda and API Gateway to insert items in a DynamoDB table. The example implemented a function which stored the location of the user. In this tutorial we create a Lambda function which retrieves this data from the DynamoDB table and expose this functionality over HTTP using API Gateway.
Create a DynamoDB Global Secondary Index
The DeviceLocation DynamoDB table uses the id as partition key.</description>
    </item>
    
    <item>
      <title>AWS tutorial: DynamoDB part 1</title>
      <link>https://jamiecraane.dev/2016/12/02/aws_dynamo_db1/</link>
      <pubDate>Fri, 02 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2016/12/02/aws_dynamo_db1/</guid>
      <description>In this post I am going through a full (Java) example of integrating AWS Lambda, DynamoDb and Api Gateway to create a function and expose this function as a HTTP resource for other parties to consume.
Before we dive into the details I will give a brief overview of the AWS services used in this example (as taken from the AWS documentation):
AWS Lambda. AWS Lambda is a compute service that runs developers&amp;rsquo; code in response to events and automatically manages the compute resources for them, making it easy to build applications that respond quickly to new information.</description>
    </item>
    
  </channel>
</rss>
