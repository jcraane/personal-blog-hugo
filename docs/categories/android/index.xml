<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Jamie Craane personal blog</title>
    <link>https://jamiecraane.dev/categories/android/</link>
    <description>Recent content in Android on Jamie Craane personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://jamiecraane.dev/categories/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jetpack Compose - Recompositions</title>
      <link>https://jamiecraane.dev/2022/11/13/compose_recompositions/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2022/11/13/compose_recompositions/</guid>
      <description>What is recomposition A Compose function in Jetpack Compose represents some UI to be rendered:
@Composable fun UsersScreen() { var usersScreenState by remember { mutableStateOf( UsersScreenState( title = &amp;#34;Users&amp;#34;, body = &amp;#34;This is the users screen&amp;#34;, (1..40).toList().map { Person(it, &amp;#34;Firstname Lastname $it&amp;#34;) }, ) ) } Column() { Text(usersScreenState.title) Text(usersScreenState.description) Button(onClick = { usersScreenState = usersScreenState.copy(title = Random.nextInt().toString()) }) { Text(&amp;#34;Change title&amp;#34;) } PersonList(usersScreenState.persons) } } Notice that the usersScreenState is a var which means it can change.</description>
    </item>
    
    <item>
      <title>Koin ViewModel Injection</title>
      <link>https://jamiecraane.dev/2022/07/27/koin_viewmodel_injection/</link>
      <pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2022/07/27/koin_viewmodel_injection/</guid>
      <description>Image by Dall-E: &amp;ldquo;Inside of a large factory assembling robots from parts. The scene is somewhat dark with neon lights. cyberpunk style.&amp;rdquo;
Context A ViewModel in Android (not to be confused with the term ViewModel in the MVVM architecture pattern) is a component scoped to the lifecycle of another component, usually a fragment or an activity. To create maintainable code without becoming the ViewModel to large, the ViewModel delegates to other objects.</description>
    </item>
    
    <item>
      <title>Casting images with Chromecast</title>
      <link>https://jamiecraane.dev/2021/01/05/android_chromecast_images/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2021/01/05/android_chromecast_images/</guid>
      <description>Full source code can be found here: https://github.com/jcraane/android-simple-image-cast
By adding Chromecast support to media rich apps like photo- and video players, users can display content to Chromecast enabled devices. This greatly enhances the user experience of those apps.
This post demonstrates how to integrate the Chromecast SDK to add cast support for casting images. The app displays a list of publicly available images using an image carousel. When the user scrolls through those images, the images are cast to a connected receiver.</description>
    </item>
    
  </channel>
</rss>
