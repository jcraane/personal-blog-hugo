<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin on Jamie Craane personal blog</title>
    <link>https://jamiecraane.dev/categories/kotlin/</link>
    <description>Recent content in Kotlin on Jamie Craane personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jamiecraane.dev/categories/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Integrating Firebase auth in server side Thymeleaf app</title>
      <link>https://jamiecraane.dev/2025/06/12/firebase_auth_ktor_thymeleaf/</link>
      <pubDate>Thu, 12 Jun 2025 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2025/06/12/firebase_auth_ktor_thymeleaf/</guid>
      <description>Server-Side Login with Firebase in Thymeleaf Templates This blog post explains how to implement server-side authentication with Firebase in a Kotlin Ktor application using Thymeleaf templates. This approach is particularly useful for admin panels or dashboards where you want to leverage Firebase Authentication while rendering server-side HTML. By leveraging Thymeleaf (or other server-side templates for example Freemarker), may shorten the time-to-market for these kind of dashboard compared to full fledged Javascript frameworks like Angular or React.</description>
    </item>
    
    <item>
      <title>Integrating Firebase JWT token verification in Ktor - Part 2</title>
      <link>https://jamiecraane.dev/2025/01/16/firebase_jwt_ktor_part_2/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2025/01/16/firebase_jwt_ktor_part_2/</guid>
      <description>Part 2: Integrating Firebase Users into Your Database with Ktor In the first part of this blog series, we explored how to integrate Firebase JWT authentication into your Ktor application. Besides creating accounts and logging in, we also want to store a reference of the Firebase user in our own database. This way, data can be associated with a specific user.
In this post, we will look at how to integrate your Firebase users in your own application database.</description>
    </item>
    
    <item>
      <title>AI Assistant Prompt Catalog</title>
      <link>https://jamiecraane.dev/2024/12/11/ai-assistant-prompt-catalog/</link>
      <pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2024/12/11/ai-assistant-prompt-catalog/</guid>
      <description>AI Assistant prompt catalog Prompts Android: Replace kotlin synthetic view viewBinding @author: https://x.com/jcraane
Kotlin synthetics are deprecated. This prompt replaces Kotlin synthetics in a file with viewBinding:
Replace kotlin synthetic with viewBinding. Prefix all Koltin synthetic views with binding. Replace snake case view names with camel casing. $SELECTION Create a unit test using Kotest and BehaviorSpec @author: https://x.com/jcraane
You are an expert AI programmer which uses unit tests to verify behavior.</description>
    </item>
    
    <item>
      <title>Integrating Firebase JWT token verification in Ktor - Part 1</title>
      <link>https://jamiecraane.dev/2024/12/11/firebase_jwt_ktor_part_1/</link>
      <pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2024/12/11/firebase_jwt_ktor_part_1/</guid>
      <description>Integrating Firebase JWT token verification in Ktor - Part 1 As applications become more complex and security becomes a priority, choosing the right tools to handle authentication is crucial. Today, we&amp;rsquo;ll explore how to integrate Firebase JWT (JSON Web Token) authentication in a Ktor server application. This blog post will cover the core setup and implementation details required to ensure secure handling of JWTs in a Ktor application.
Introduction to Ktor and Firebase Authentication https://ktor.</description>
    </item>
    
    <item>
      <title>Kotlin: Multi variable null check</title>
      <link>https://jamiecraane.dev/2020/12/10/kotlin_null/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecraane.dev/2020/12/10/kotlin_null/</guid>
      <description>Although not-null, immutable variables with sensible defaults are often desired, it is not always the case. It is sometimes required to check if multiple variables are not null. This post describes several variants of how to do this when smart casts are not possible because the variables are mutable.
Consider the following example:
class Person() { var name: String? = null var age: Int? = null fun doSomething() { if (name !</description>
    </item>
    
  </channel>
</rss>
